1.1 Arrows as Functions

Arrows, morphisms and functions

For example:

B f(A a);
C g(B b);

C g_after_f(A a)
{
	return g(f(a));
}

In haskell:
f :: A -> B
g :: B -> C

Their composition:
g . f

1.2 Properties of Composition

2 properties that the composition in any category must satisfy.
	1. Composition is associative. 
	2. For every object A there is an arrow that goes from A and loops back to A.

The identity function in C++:
	template<class T> T id(T x) { return x; }

The identity function in Haskell:
	id :: a -> a
	id x = x

lowercase stands for variable. Uppercase stands for concrete type
	in pseudo-haskell:
	f . id == f
	id . f == f

Summary: A category consists of objects and arrows(morphisms). Arrows can be composed, 
and the composition is associative. Every object has an identity arrow that serves as a 
unit under composition.

1.3 Composition is the Essence of Programming

1.4 Challenges
1.
2.
3.
4. In the world-wide web, links could be understood as morphisms. Yet, both composition and 
   identity are lacking. Composition because if page A contains a link to 
   page B and page B contains a link to page C, it is not guarateed that page 
   A contains a link to page C. And identitiy because pages don't require to have a link to 
   themselves. 

   This makes me think which type of graph a category is. 

5. No, because I am not friends with all of my friends' friends.
6. A directed graph is a category if for all A, B, C - nodes of the graph. If 
A is a neighboor of B and B is a neighboor of C -> A is a neighboor of C. There must
also exist a path from every node to itself. Queue discussion on reachbility.

2. Types and Functions

2.1 Who needs Types? 

2.2 Types are about composability

2.3 What are types?

The simplest intuition for types is that they are sets of values. The 
type bool, for example, is a two-element set of True and False.

In haskell Integer is an infite set. While Int is a finite-set that corresponds 
to the machine, just like c++ int.

There is a category of sets, which is call *Set*. In *Set* objects are sets and morphisms are functions.

2.4 Why do we need a mathematical mode?

pag. 23

template <class T> void unit() {};





